openapi: 3.0.0
info:
  title: 'Cinebee API'
  description: 'Cinema management system'
  contact:
    email: admin@admin.com
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
paths:
  /api/employee-role:
    get:
      tags:
        - EmployeeRole
      summary: 'List Employee Role'
      parameters:
        -
          name: q
          in: query
          description: 'Search query'
          schema:
            type: string
        -
          name: page
          in: query
          description: Page
          schema:
            type: number
          example: '1'
        -
          name: per_page
          in: query
          description: 'Items per page'
          schema:
            type: number
          example: '10'
        -
          name: sort_by
          in: query
          description: 'Sort items by'
          schema:
            type: string
          example: updated_at
        -
          name: sort_type
          in: query
          description: 'Sort items type [''asc'', ''desc'']'
          schema:
            type: string
          example: desc
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
    post:
      tags:
        - EmployeeRole
      summary: 'Store new Employee Role'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - slug
              properties:
                name:
                  type: string
                slug:
                  type: string
              type: string
            example:
              name: 'Nhân Viên'
              slug: nhan-vien
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  /api/employee-role/deleted:
    get:
      tags:
        - EmployeeRole
      summary: 'List Employee Role Deleted'
      parameters:
        -
          name: q
          in: query
          description: 'Search query'
          schema:
            type: string
        -
          name: page
          in: query
          description: Page
          schema:
            type: number
          example: '1'
        -
          name: per_page
          in: query
          description: 'Items per page'
          schema:
            type: number
          example: '10'
        -
          name: sort_by
          in: query
          description: 'Sort items by'
          schema:
            type: string
          example: updated_at
        -
          name: sort_type
          in: query
          description: 'Sort items type [''asc'', ''desc'']'
          schema:
            type: string
          example: desc
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/employee-role/{id}':
    get:
      tags:
        - EmployeeRole
      summary: 'Get Employee Role by id'
      parameters:
        -
          name: id
          in: path
          description: 'Item id'
          required: true
          schema:
            type: number
          example: '21'
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
    put:
      tags:
        - EmployeeRole
      summary: 'Update a Employee Role'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - slug
              properties:
                name:
                  type: string
                slug:
                  type: string
              type: string
            example:
              name: 'Nhân Viên'
              slug: nhan-vien
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/employee-role/{slug}':
    get:
      tags:
        - EmployeeRole
      summary: 'Get Employee Role by slug'
      parameters:
        -
          name: slug
          in: path
          description: 'Employee Role slug'
          required: true
          schema:
            type: string
          example: employee-role
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/employee-role/{id}/delete':
    delete:
      tags:
        - EmployeeRole
      summary: 'Delete a room status'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/employee-role/{id}/remove':
    delete:
      tags:
        - EmployeeRole
      summary: 'Remove Employee Role from trash'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/employee-role/{id}/restore':
    patch:
      tags:
        - EmployeeRole
      summary: 'Restore Employee Role from trash'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  /api/items:
    get:
      tags:
        - Item
      summary: 'List items'
      parameters:
        -
          name: q
          in: query
          description: 'Search query'
          schema:
            type: string
        -
          name: page
          in: query
          description: Page
          schema:
            type: number
          example: '1'
        -
          name: per_page
          in: query
          description: 'Items per page'
          schema:
            type: number
          example: '10'
        -
          name: sort_by
          in: query
          description: 'Sort items by'
          schema:
            type: string
          example: updated_at
        -
          name: sort_type
          in: query
          description: 'Sort items type [''asc'', ''desc'']'
          schema:
            type: string
          example: desc
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
    post:
      tags:
        - Item
      summary: 'Store new Item'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - slug
              properties:
                name:
                  type: string
                slug:
                  type: string
              type: string
            example:
              name: 'Name of Item'
              slug: name-of-item
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/items/{id}':
    get:
      tags:
        - Item
      summary: 'Get item by id'
      parameters:
        -
          name: id
          in: path
          description: 'Item id'
          required: true
          schema:
            type: number
          example: '21'
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
    put:
      tags:
        - Item
      summary: 'Update a Item'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - slug
              properties:
                name:
                  type: string
                slug:
                  type: string
              type: string
            example:
              name: 'Name of Item'
              slug: name-of-item
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  /api/items/deleted:
    get:
      tags:
        - Item
      summary: 'List deleted items'
      parameters:
        -
          name: q
          in: query
          description: 'Search query'
          schema:
            type: string
        -
          name: page
          in: query
          description: Page
          schema:
            type: number
          example: '1'
        -
          name: per_page
          in: query
          description: 'Items per page'
          schema:
            type: number
          example: '10'
        -
          name: sort_by
          in: query
          description: 'Sort items by'
          schema:
            type: string
          example: updated_at
        -
          name: sort_type
          in: query
          description: 'Sort items type [''asc'', ''desc'']'
          schema:
            type: string
          example: desc
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/items/{slug}':
    get:
      tags:
        - Item
      summary: 'Get item by slug'
      parameters:
        -
          name: slug
          in: path
          description: 'Item slug'
          required: true
          schema:
            type: string
          example: name-of-item
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/items/{id}/delete':
    delete:
      tags:
        - Item
      summary: 'Delete a room status'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/items/{id}/remove':
    delete:
      tags:
        - Item
      summary: 'Remove Item from trash'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/items/{id}/restore':
    patch:
      tags:
        - Item
      summary: 'Restore Item from trash'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  /api/rooms:
    get:
      tags:
        - Rooms
      summary: 'List Rooms'
      parameters:
        -
          name: q
          in: query
          description: 'Search query'
          schema:
            type: string
        -
          name: page
          in: query
          description: Page
          schema:
            type: number
          example: '1'
        -
          name: per_page
          in: query
          description: 'Items per page'
          schema:
            type: number
          example: '10'
        -
          name: sort_by
          in: query
          description: 'Sort items by'
          schema:
            type: string
          example: updated_at
        -
          name: sort_type
          in: query
          description: 'Sort items type [''asc'', ''desc'']'
          schema:
            type: string
          example: desc
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
    post:
      tags:
        - Rooms
      summary: 'Store new Rooms'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                room_status_id:
                  type: number
              type: string
            example:
              name: 'Status of seat'
              room_status_id: null
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  /api/rooms/deleted:
    get:
      tags:
        - Rooms
      summary: 'List Room Deleted'
      parameters:
        -
          name: q
          in: query
          description: 'Search query'
          schema:
            type: string
        -
          name: page
          in: query
          description: Page
          schema:
            type: number
          example: '1'
        -
          name: per_page
          in: query
          description: 'Items per page'
          schema:
            type: number
          example: '10'
        -
          name: sort_by
          in: query
          description: 'Sort items by'
          schema:
            type: string
          example: updated_at
        -
          name: sort_type
          in: query
          description: 'Sort items type [''asc'', ''desc'']'
          schema:
            type: string
          example: desc
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/rooms/{id}':
    get:
      tags:
        - Rooms
      summary: 'Get Room by id'
      parameters:
        -
          name: id
          in: path
          description: 'Room id'
          required: true
          schema:
            type: number
          example: '21'
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
    put:
      tags:
        - Rooms
      summary: 'Update a Room'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - room_status_id
              properties:
                name:
                  type: string
                room_status_id:
                  type: string
              type: string
            example:
              name: 'Status of seat'
              room_status_id: '9'
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/rooms/{id}/delete':
    delete:
      tags:
        - Rooms
      summary: 'Delete a Room'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/rooms/{id}/remove':
    delete:
      tags:
        - Rooms
      summary: 'Remove Room from trash'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/rooms/{id}/restore':
    patch:
      tags:
        - Rooms
      summary: 'Restore Room from trash'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  /api/room-status:
    get:
      tags:
        - RoomStatus
      summary: 'RoomStatus index'
      parameters:
        -
          name: q
          in: query
          description: 'Search query'
          schema:
            type: string
        -
          name: page
          in: query
          description: Page
          schema:
            type: number
          example: '1'
        -
          name: per_page
          in: query
          description: 'Items per page'
          schema:
            type: number
          example: '10'
        -
          name: sort_by
          in: query
          description: 'Sort items by'
          schema:
            type: string
          example: updated_at
        -
          name: sort_type
          in: query
          description: 'Sort items type [''asc'', ''desc'']'
          schema:
            type: string
          example: desc
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
    post:
      tags:
        - RoomStatus
      summary: 'Store new room status'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
              type: string
            example:
              name: 'Name of Room status'
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/room-status/{id}':
    get:
      tags:
        - RoomStatus
      summary: 'Get Room Status by id'
      parameters:
        -
          name: id
          in: path
          description: 'Item id'
          required: true
          schema:
            type: number
          example: '21'
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
    put:
      tags:
        - RoomStatus
      summary: 'Update a room status'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
              type: string
            example:
              name: 'Name of Room status'
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/room-status/{id}/delete':
    delete:
      tags:
        - RoomStatus
      summary: 'Delete a room status'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  /api/seats:
    get:
      tags:
        - Seat
      summary: 'List Seats'
      parameters:
        -
          name: q
          in: query
          description: 'Search query'
          schema:
            type: string
        -
          name: page
          in: query
          description: Page
          schema:
            type: number
          example: '1'
        -
          name: per_page
          in: query
          description: 'Items per page'
          schema:
            type: number
          example: '10'
        -
          name: sort_by
          in: query
          description: 'Sort items by'
          schema:
            type: string
          example: updated_at
        -
          name: sort_type
          in: query
          description: 'Sort items type [''asc'', ''desc'']'
          schema:
            type: string
          example: desc
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
    post:
      tags:
        - Seat
      summary: 'Store new Seat'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - row
                - col
                - room_id
                - seat_status_id
              properties:
                name:
                  type: string
                row:
                  type: number
                col:
                  type: number
                room_id:
                  type: number
                seat_status_id:
                  type: number
              type: string
            example:
              name: 'Ghế 1'
              col: 0
              row: 0
              room_id: 1
              seat_status_id: 1
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  /api/seats/deleted:
    get:
      tags:
        - Seat
      summary: 'List Seat Deleted'
      parameters:
        -
          name: q
          in: query
          description: 'Search query'
          schema:
            type: string
        -
          name: page
          in: query
          description: Page
          schema:
            type: number
          example: '1'
        -
          name: per_page
          in: query
          description: 'Items per page'
          schema:
            type: number
          example: '10'
        -
          name: sort_by
          in: query
          description: 'Sort items by'
          schema:
            type: string
          example: updated_at
        -
          name: sort_type
          in: query
          description: 'Sort items type [''asc'', ''desc'']'
          schema:
            type: string
          example: desc
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/seats/{id}':
    get:
      tags:
        - Seat
      summary: 'Get Seat by id'
      parameters:
        -
          name: id
          in: path
          description: 'Item id'
          required: true
          schema:
            type: number
          example: '21'
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
    put:
      tags:
        - Seat
      summary: 'Update a Seat'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - row
                - col
                - room_id
                - seat_status_id
              properties:
                name:
                  type: string
                row:
                  type: number
                col:
                  type: number
                room_id:
                  type: number
                seat_status_id:
                  type: number
              type: string
            example:
              name: 'Ghế 1'
              col: 0
              row: 0
              room_id: 1
              seat_status_id: 1
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/seats/{id}/delete':
    delete:
      tags:
        - Seat
      summary: 'Delete a Seat'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/seats/{id}/remove':
    delete:
      tags:
        - Seat
      summary: 'Remove Room from trash'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/seats/{id}/restore':
    patch:
      tags:
        - Seat
      summary: 'Restore Room from trash'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  /api/seat-status:
    get:
      tags:
        - SeatStatus
      summary: 'List Seat Status'
      parameters:
        -
          name: q
          in: query
          description: 'Search query'
          schema:
            type: string
        -
          name: page
          in: query
          description: Page
          schema:
            type: number
          example: '1'
        -
          name: per_page
          in: query
          description: 'Items per page'
          schema:
            type: number
          example: '10'
        -
          name: sort_by
          in: query
          description: 'Sort items by'
          schema:
            type: string
          example: updated_at
        -
          name: sort_type
          in: query
          description: 'Sort items type [''asc'', ''desc'']'
          schema:
            type: string
          example: desc
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
    post:
      tags:
        - SeatStatus
      summary: 'Store new Seat Status'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - slug
              properties:
                name:
                  type: string
                slug:
                  type: string
              type: string
            example:
              name: 'Status of seat'
              slug: status-of-seat
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  /api/seat-status/deleted:
    get:
      tags:
        - SeatStatus
      summary: 'List Seat Status Deleted'
      parameters:
        -
          name: q
          in: query
          description: 'Search query'
          schema:
            type: string
        -
          name: page
          in: query
          description: Page
          schema:
            type: number
          example: '1'
        -
          name: per_page
          in: query
          description: 'Items per page'
          schema:
            type: number
          example: '10'
        -
          name: sort_by
          in: query
          description: 'Sort items by'
          schema:
            type: string
          example: updated_at
        -
          name: sort_type
          in: query
          description: 'Sort items type [''asc'', ''desc'']'
          schema:
            type: string
          example: desc
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/seat-status/{id}':
    get:
      tags:
        - SeatStatus
      summary: 'Get Seat Status by id'
      parameters:
        -
          name: id
          in: path
          description: 'Item id'
          required: true
          schema:
            type: number
          example: '21'
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
    put:
      tags:
        - SeatStatus
      summary: 'Update a Seat Status'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - slug
              properties:
                name:
                  type: string
                slug:
                  type: string
              type: string
            example:
              name: 'Status of seat'
              slug: status-of-seat
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/seat-status/{slug}':
    get:
      tags:
        - SeatStatus
      summary: 'Get Seat Status by slug'
      parameters:
        -
          name: slug
          in: path
          description: 'Status slug'
          required: true
          schema:
            type: string
          example: status-of-seat
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/seat-status/{id}/delete':
    delete:
      tags:
        - SeatStatus
      summary: 'Delete a room status'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/seat-status/{id}/remove':
    delete:
      tags:
        - SeatStatus
      summary: 'Remove Seat Status from trash'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
  '/api/seat-status/{id}/restore':
    patch:
      tags:
        - SeatStatus
      summary: 'Restore Seat Status from trash'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: 'Not Found'
security:
  - []
